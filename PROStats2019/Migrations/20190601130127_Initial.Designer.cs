// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PROStats2019.Models;

namespace PROStats2019.Migrations
{
    [DbContext(typeof(PROStats2019Context))]
    [Migration("20190601130127_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HockeyStats2019.Models.Arena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaCategoryId");

                    b.Property<string>("ArenaCountry");

                    b.Property<string>("ArenaCounty");

                    b.Property<string>("ArenaName");

                    b.Property<string>("ArenaNumberTSM");

                    b.Property<string>("ArenaStreetAddress");

                    b.Property<string>("ArenaZipCode");

                    b.Property<string>("AudienceCapacity");

                    b.Property<string>("Bench");

                    b.Property<string>("BuildingYear");

                    b.Property<string>("Chair");

                    b.Property<string>("DisabledSeats");

                    b.Property<string>("LatestChecked");

                    b.Property<string>("LatestInspection");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("RebuildingYear");

                    b.Property<int?>("RefereeDistrictId");

                    b.Property<string>("SoftChair");

                    b.Property<string>("Standing");

                    b.HasKey("Id");

                    b.HasIndex("ArenaCategoryId");

                    b.HasIndex("RefereeDistrictId");

                    b.ToTable("Arena");
                });

            modelBuilder.Entity("HockeyStats2019.Models.ArenaCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArenaCategoryName");

                    b.HasKey("Id");

                    b.ToTable("ArenaCategory");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClubId");

                    b.Property<int?>("CoachId");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumber1");

                    b.Property<int?>("PlayerId");

                    b.Property<int?>("RefereeCategoryId");

                    b.Property<int?>("RefereeCategoryTypeId");

                    b.Property<int?>("RefereeDistrictId");

                    b.Property<int?>("RefereeId");

                    b.Property<int?>("RefereeNumber");

                    b.Property<int?>("RefereeTypeId");

                    b.Property<string>("Ssn");

                    b.Property<int?>("StaffId");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("CoachId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RefereeCategoryId");

                    b.HasIndex("RefereeCategoryTypeId");

                    b.HasIndex("RefereeDistrictId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("RefereeTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Referee");
                });

            modelBuilder.Entity("HockeyStats2019.Models.RefereeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefereeCategoryName");

                    b.HasKey("Id");

                    b.ToTable("RefereeCategory");
                });

            modelBuilder.Entity("HockeyStats2019.Models.RefereeCategoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefereeCategoryTypeName");

                    b.HasKey("Id");

                    b.ToTable("RefereeCategoryType");
                });

            modelBuilder.Entity("HockeyStats2019.Models.RefereeDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefereeDistrictName");

                    b.HasKey("Id");

                    b.ToTable("RefereeDistrict");
                });

            modelBuilder.Entity("HockeyStats2019.Models.RefereeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefereeTypeName");

                    b.HasKey("Id");

                    b.ToTable("RefereeType");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("SeriesName");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("HockeyStats2019.Models.ShowCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("ArenaId1");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("PersonId5");

                    b.Property<int?>("SeriesId");

                    b.Property<string>("ShowCaseName");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ArenaId1");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("PersonId5");

                    b.HasIndex("SeriesId");

                    b.ToTable("ShowCase");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<string>("TeamName");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("PROStats2019.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClubName");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("PROStats2019.Models.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameStatusName");

                    b.HasKey("Id");

                    b.ToTable("GameStatus");
                });

            modelBuilder.Entity("PROStats2019.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationName");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2012", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2012");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2013", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2013");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2014", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2014");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2015", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2015");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2016", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2016");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2017", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2017");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2018", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2018");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2019", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("PROGames2019");
                });

            modelBuilder.Entity("PROStats2019.Models.PaymentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AlowenceHD1");

                    b.Property<double?>("AlowenceHD2");

                    b.Property<double?>("AlowenceLD1");

                    b.Property<double?>("AlowenceLD2");

                    b.Property<double?>("FeeHD1");

                    b.Property<double?>("FeeHD2");

                    b.Property<double?>("FeeLD1");

                    b.Property<double?>("FeeLD2");

                    b.Property<int?>("GameId");

                    b.Property<double?>("LateMatchStartHD1");

                    b.Property<double?>("LateMatchStartHD2");

                    b.Property<double?>("LateMatchStartLD1");

                    b.Property<double?>("LateMatchStartLD2");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<double?>("TotalPaymentHD1");

                    b.Property<double?>("TotalPaymentHD2");

                    b.Property<double?>("TotalPaymentLD1");

                    b.Property<double?>("TotalPaymentLD2");

                    b.Property<double?>("TravelCostHD1");

                    b.Property<double?>("TravelCostHD2");

                    b.Property<double?>("TravelCostLD1");

                    b.Property<double?>("TravelCostLD2");

                    b.Property<double?>("TravelDistanceHD1");

                    b.Property<double?>("TravelDistanceHD2");

                    b.Property<double?>("TravelDistanceLD1");

                    b.Property<double?>("TravelDistanceLD2");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.ToTable("PaymentPost");
                });

            modelBuilder.Entity("PROStats2019.Models.ProGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArenaId");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<DateTime>("MatchDateTime");

                    b.Property<int?>("MatchNumber");

                    b.Property<bool>("Payed");

                    b.Property<int?>("Payment");

                    b.Property<int?>("PersonId");

                    b.Property<int?>("PersonId1");

                    b.Property<int?>("PersonId2");

                    b.Property<int?>("PersonId3");

                    b.Property<int?>("PersonId4");

                    b.Property<int?>("SeriesId");

                    b.Property<int?>("TSMNumber");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.HasIndex("PersonId3");

                    b.HasIndex("PersonId4");

                    b.HasIndex("SeriesId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("ProGame");
                });

            modelBuilder.Entity("PROStats2019.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("KcalPerHour");

                    b.Property<string>("SportName");

                    b.HasKey("Id");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("PROStats2019.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Distance");

                    b.Property<decimal>("Duration");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("SportId");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SportId");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Arena", b =>
                {
                    b.HasOne("HockeyStats2019.Models.ArenaCategory", "ArenaCategory")
                        .WithMany()
                        .HasForeignKey("ArenaCategoryId");

                    b.HasOne("HockeyStats2019.Models.RefereeDistrict", "RefereeDistrict")
                        .WithMany()
                        .HasForeignKey("RefereeDistrictId");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Game", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Person", b =>
                {
                    b.HasOne("PROStats2019.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("HockeyStats2019.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.HasOne("HockeyStats2019.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("HockeyStats2019.Models.RefereeCategory", "RefereeCategory")
                        .WithMany()
                        .HasForeignKey("RefereeCategoryId");

                    b.HasOne("HockeyStats2019.Models.RefereeCategoryType", "RefereeCategoryType")
                        .WithMany()
                        .HasForeignKey("RefereeCategoryTypeId");

                    b.HasOne("HockeyStats2019.Models.RefereeDistrict", "RefereeDistrict")
                        .WithMany()
                        .HasForeignKey("RefereeDistrictId");

                    b.HasOne("HockeyStats2019.Models.Referee", "Referee")
                        .WithMany()
                        .HasForeignKey("RefereeId");

                    b.HasOne("HockeyStats2019.Models.RefereeType", "RefereeType")
                        .WithMany()
                        .HasForeignKey("RefereeTypeId");

                    b.HasOne("HockeyStats2019.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("HockeyStats2019.Models.ShowCase", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("HockeyStats2019.Models.Arena", "Location")
                        .WithMany()
                        .HasForeignKey("ArenaId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Coach")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Coach1")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Coach2")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Coach3")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Person", "GeneralManager")
                        .WithMany()
                        .HasForeignKey("PersonId5");

                    b.HasOne("HockeyStats2019.Models.Series", "AgeCategory")
                        .WithMany()
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("HockeyStats2019.Models.Team", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Person", "HeadCoach")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "AssCoach")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "AssCoach1")
                        .WithMany()
                        .HasForeignKey("PersonId2");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2012", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2013", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2014", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2015", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2016", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2017", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2018", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PROModels.PROGames2019", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.PaymentPost", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");
                });

            modelBuilder.Entity("PROStats2019.Models.ProGame", b =>
                {
                    b.HasOne("HockeyStats2019.Models.Arena", "Arena")
                        .WithMany()
                        .HasForeignKey("ArenaId");

                    b.HasOne("PROStats2019.Models.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee1")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee2")
                        .WithMany()
                        .HasForeignKey("PersonId1");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee3")
                        .WithMany()
                        .HasForeignKey("PersonId2");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee4")
                        .WithMany()
                        .HasForeignKey("PersonId3");

                    b.HasOne("HockeyStats2019.Models.Person", "Referee5")
                        .WithMany()
                        .HasForeignKey("PersonId4");

                    b.HasOne("HockeyStats2019.Models.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId");

                    b.HasOne("HockeyStats2019.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("HockeyStats2019.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("PROStats2019.Models.Workout", b =>
                {
                    b.HasOne("PROStats2019.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("PROStats2019.Models.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");
                });
#pragma warning restore 612, 618
        }
    }
}
